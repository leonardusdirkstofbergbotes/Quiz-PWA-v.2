{"remainingRequest":"/home/leonardus/Desktop/My Projects/Quiz-PWA-v.2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/leonardus/Desktop/My Projects/Quiz-PWA-v.2/src/views/QuizPage.vue?vue&type=style&index=0&id=90991284&scoped=true&lang=css&","dependencies":[{"path":"/home/leonardus/Desktop/My Projects/Quiz-PWA-v.2/src/views/QuizPage.vue","mtime":1595159935924},{"path":"/home/leonardus/Desktop/My Projects/Quiz-PWA-v.2/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/leonardus/Desktop/My Projects/Quiz-PWA-v.2/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/leonardus/Desktop/My Projects/Quiz-PWA-v.2/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/leonardus/Desktop/My Projects/Quiz-PWA-v.2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/leonardus/Desktop/My Projects/Quiz-PWA-v.2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKI3RpbWVySG9sZGVyIHsKICAgIHdpZHRoOiA1MCU7CiAgICBtYXJnaW46IGF1dG87CiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7Cn0KCiNkaWFsb2dIZWFkZXIgewogICAgYmFja2dyb3VuZC1jb2xvcjogcmVkOwp9CgouY3VzdG9tQnRuIHsKICAgIGZvbnQtc2l6ZTogNDBweCFpbXBvcnRhbnQ7Cn0KCiNub1Jlc3VsdEltZ0hvbGRlciB7CiAgICBkaXNwbGF5OiBmbGV4OwogICAgd2lkdGg6IGF1dG87CiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOzsKICAgIGFsaWduLWNvbnRlbnQ6IGNlbnRlcjsKICAgIHBhZGRpbmc6IDIwcHg7CiAgICBoZWlnaHQ6IDgwdmg7CiAgICBtYXJnaW4tYm90dG9tOiAyMHB4Owp9Cgojbm9SZXN1bHRJbWcgewogICAgbWFyZ2luOiBhdXRvOwogICAgaGVpZ2h0OiA4MCU7CiAgICBtYXgtd2lkdGg6IDgwMHB4Owp9Cg=="},{"version":3,"sources":["QuizPage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwiBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"QuizPage.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div id=\"quizWrapper\">\n        <audio id=\"timer\" preload=\"auto\">\n            <source src=\"@/assets/sounds/timer.mp3\"></source>\n        </audio>\n        <audio id=\"timesUp\" preload=\"auto\">\n            <source src=\"@/assets/sounds/timesUp.mp3\"></source>\n        </audio>\n         <audio id=\"wrong\" preload=\"auto\">\n            <source src=\"@/assets/sounds/fail.mp3\"></source>\n        </audio>\n        <audio id=\"right\" preload=\"auto\">\n            <source src=\"@/assets/sounds/correct.mp3\"></source>\n        </audio>\n\n        <!-- Bar that lets you choose the options -->\n        <v-flex elevation-10  class=\"ma-1 pa-3 rounded-xl\">\n        <v-row v-if=\"optionSelect\" justify-space-around align=\"center\" justify=\"center\"> \n            <v-col>\n                <v-select v-model=\"difficulty\" :items=\"difficultyOptions\" label=\"Difficulty\"></v-select>\n            </v-col>\n\n            <v-col>\n                <v-select v-model=\"number\" :items=\"questionNumbers\" label=\"How many Questions\"></v-select>\n            </v-col>\n\n            <v-col>\n                <v-select v-model=\"questionType\" :items=\"questionTypeOptions\" label=\"Type of Questions\"></v-select>\n            </v-col>\n\n            <v-col>\n                    <v-btn height=\"60px\" dark block @click=\"getQuestions\" color=\"orange\" class=\"customBtn\">GO</v-btn>\n            </v-col>\n        </v-row> \n        </v-flex>\n        <!-- Option bar ends -->\n\n        <v-container v-if=\"noMoreResults\" id=\"noResultImgHolder\">\n            <img id=\"noResultImg\" src=\"@/assets/images/noResult.jpg\">\n            <h2 class=\"display-2 text-center\">No more results</h2>\n            <h3 class=\"sub-heading text-center\">We are getting more soon</h3>\n        </v-container>\n\n        <v-container v-if=\"quizes.length !== 0\"> <!-- wrapper for each question card -->\n        <v-progress-linear height=\"20\" rounded v-if=\"progress !== 0\" :value=\"progress\" class=\"mb-5\">{{progressText}}</v-progress-linear>\n        \n        <v-flex v-if=\"countDown !== 0\" id=\"timerHolder\">\n            <!-- Timer comes here -->\n            <b :style=\"{color: timerColor}\" class=\"display-4\">{{countDown}}</b>\n        </v-flex>\n\n            <v-flex >\n                <h1 class=\"text-center\">{{quizes[num].num}}. {{quizes[num].name}}</h1> <!-- Question number and title -->\n\n                <!-- contains the possible answers -->\n                <v-layout row justify-space-between> \n                    <v-card width=\"40%\" min-height=\"200\" v-for=\"item in shuffleArray\" :key=\"item.question\" @click=\"storeAnswer(item.correct)\" elevation-10 class=\"rounded-lg my-5\">\n                        <v-card-text class=\"text-center display-3\">{{item.question}}</v-card-text>\n                    </v-card>\n                </v-layout>\n\n                <!-- correct answer dialog -->\n               <v-dialog v-model=\"dialog\" persistent max-width=\"350\"> \n                    <v-card>\n                        <v-card-title class=\"headline text-center\">{{dialogHeader}}</v-card-title>\n                        <v-card-subtitle class=\"text-center\">The correct answer is:</v-card-subtitle>\n                        <v-card-text class=\"text-center display-3\">{{correctAnswer.question}}</v-card-text>\n                        <v-card-actions>\n                        <v-spacer></v-spacer>\n                        <v-btn color=\"green darken-1\" text @click=\"resetSounds\">Next Question</v-btn>\n                        </v-card-actions>\n                    </v-card>\n                </v-dialog>\n\n                <!-- try again dialog -->\n                 <v-dialog v-model=\"tryAgainDialog\" max-width=\"290\">  \n                    <v-card>\n                        <v-card-title class=\"headline\">Well done</v-card-title>\n\n                        <v-card-text>\n                            You scored {{correctCount}} out of {{QuizArrayLength}}\n                        </v-card-text>\n\n                        <v-card-actions>\n                        <v-spacer></v-spacer>\n\n                        <v-btn color=\"green darken-1\" text @click=\"tryAgainDialog = false\">\n                            Disagree\n                        </v-btn>\n\n                        <v-btn color=\"green darken-1\" text @click=\"tryAgain\">\n                            Try again\n                        </v-btn>\n                        </v-card-actions>\n                    </v-card>\n                </v-dialog> \n                <!-- try again dialog ends -->\n\n            </v-flex>\n        </v-container>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: 'QuizPage',\n\n    created () { // sets the code of the category\n        if (this.category == 'Sport') {\n            this.cat = 21\n        } else if (this.category == 'General Knowledge') {\n            this.cat = 9\n        } else if (this.category == 'Animals') {\n            this.cat = 27\n        } else if (this.category == 'Celebrities') {\n            this.cat = 26\n        } else if (this.category == 'Books') {\n            this.cat = 10\n        } else if (this.category == 'Movies') {\n            this.cat = 11\n        } else if (this.category == 'Music') {\n            this.cat = 12\n        } else if (this.category == 'Theatre') {\n            this.cat = 13\n        } else if (this.category == 'TV') {\n            this.cat = 14\n        } else if (this.category == 'Video Games') {\n            this.cat = 15\n        } else if (this.category == 'Board Games') {\n            this.cat = 16\n        } else if (this.category == 'Science') {\n            this.cat = 17\n        }  else if (this.category == 'Computers') {\n            this.cat = 18\n        } else if (this.category == 'Maths') {\n            this.cat = 19\n        } else if (this.category == 'Myths') {\n            this.cat = 20\n        } else if (this.category == 'Geography') {\n            this.cat = 22\n        } else if (this.category == 'Historical') {\n            this.cat = 23\n        } else if (this.category == 'Politics') {\n            this.cat = 24\n        } else if (this.category == 'Art') {\n            this.cat = 25\n        } else if (this.category == 'Vehicles') {\n            this.cat = 28\n        } else if (this.category == 'Comics') {\n            this.cat = 29\n        } else if (this.category == 'Gadgets') {\n            this.cat = 30\n        } else if (this.category == 'Anime') {\n            this.cat = 31\n        } else if (this.category == 'Cartoons') {\n            this.cat = 32\n        } \n    },\n\n    props: ['category'],\n\n    data () {\n        return {\n            noMoreResults: false,\n            correctCount: 0,\n            progress: 0,\n            optionSelect: true,\n            cat: this.category,\n            quizes: [],\n            QuizArrayLength: Number,\n            difficultyOptions: ['easy', 'medium', 'hard'],\n            difficulty: \"easy\",\n            number: 10,\n            questionNumbers: [10, 15, 20, 25],\n            questionTypeOptions: ['any','multiple', 'boolean'],\n            questionType: 'multiple',\n            num: 0,\n            tryAgainDialog: false, \n            dialog: false,\n            countDown : 20,\n            dialogHeader: '',\n            badge: ''\n        }\n    },\n\n    watch: {\n        quizes (value) {\n            this.QuizArrayLength = value.length\n        },\n\n        countDown (value) {\n            if(value == 0) {\n                var timer = document.getElementById('timer')\n                timer.pause()\n                timer.currentTime = 0\n                this.dialogHeader = \"Time is up\" \n                var timesUp = document.getElementById('timesUp')\n                timesUp.volume = 0.3 // Set volume of sound\n                timesUp.play()\n                this.dialog = true\n                this.countDown = 20\n                this.countDownTimer() // restart the timer\n                this.progress = (this.num + 1) / this.QuizArrayLength * 100\n            }\n        },\n\n        category (value) { // Also sets the code of the category\n            if (value == 'Sport') {\n                this.cat = 21\n            } else if (value == 'General Knowledge') {\n                this.cat = 9\n            } else if (value == 'Animals') {\n                this.cat = 27\n            } else if (value == 'Celebrities') {\n                this.cat = 26\n            } else if (value == 'Books') {\n                this.cat = 10\n            } else if (value == 'Movies') {\n                this.cat = 11\n            } else if (value == 'Music') {\n                this.cat = 12\n            } else if (value == 'Theatre') {\n                this.cat = 13\n            } else if (value == 'TV') {\n                this.cat = 14\n            } else if (value == 'Video Games') {\n                this.cat = 15\n            } else if (value == 'Board Games') {\n                this.cat = 16\n            } else if (value == 'Science') {\n                this.cat = 17\n            }  else if (value == 'Computers') {\n                this.cat = 18\n            } else if (value == 'Maths') {\n                this.cat = 19\n            } else if (value == 'Myths') {\n                this.cat = 20\n            } else if (value == 'Geography') {\n                this.cat = 22\n            } else if (value == 'Historical') {\n                this.cat = 23\n            } else if (value == 'Politics') {\n                this.cat = 24\n            } else if (value == 'Art') {\n                this.cat = 25\n            } else if (value == 'Vehicles') {\n                this.cat = 28\n            } else if (value == 'Comics') {\n                this.cat = 29\n            } else if (value == 'Gadgets') {\n                this.cat = 30\n            } else if (value == 'Anime') {\n                this.cat = 31\n            } else if (value == 'Cartoons') {\n                this.cat = 32\n            } \n            \n        }\n    },\n\n    computed: {\n        sessionToken () { // token that prevents the same question being requested twice\n            return this.$store.getters.getToken\n        },\n\n        profileCheck () {\n            return this.$store.getters.getProfile\n        },\n\n        user() {\n            return this.$store.getters.getUser\n        },\n\n        progressText () {\n            if (this.progress < 20) {\n                return ''\n            } else if (this.progress >= 21 && this.progress < 40) { \n                return \"You're doing great\"\n            } else if (this.progress >= 50 && this.progress < 55) {\n                return 'Halfway there'\n            } else if (this.progress > 65 && this.progress < 79) {\n                return 'Getting there'\n            }else if (this.progress >= 90 && this.progress < 100) {\n                return 'Almost there'\n            }\n        },\n\n        correctAnswer () { // filter array for correct answer\n           return this.quizes[this.num].questions.find(e => e.correct === true); \n        },\n\n        shuffleArray(a,b,c,d) {\n            var a = this.quizes[this.num].questions\n               let results =  c=a.length;while(c)b=Math.random()*c--|0,d=a[c],a[c]=a[b],a[b]=d\n               return a\n            \n        },\n\n        timerColor () {\n            if (this.countDown >= 15) {\n                return \"green\"\n            } else if (this.countDown >= 10) {\n                return \"blue\"\n            } else if (this.countDown > 5) {\n                return \"yellow\"\n            } else {\n                return \"red\"\n            }\n        }\n    },\n\n    methods: {\n        tryAgain () {\n            this.tryAgainDialog = false\n            this.getQuestions()\n            this.num = 0\n            this.countDown = 20\n        },\n\n        resetSounds () {\n            var wrong = document.getElementById('wrong')\n            var right = document.getElementById('right')\n            var timer = document.getElementById('timer')\n            if (this.num < this.QuizArrayLength - 1) {\n                this.num += 1\n                this.dialog = false\n                this.countDown = 20\n                timer.play()\n                \n                wrong.pause()\n                wrong.currentTime = 0\n                \n                right.pause()\n                right.currentTime = 0\n            } else if (this.num == this.QuizArrayLength - 1) {\n                this.dialog = false\n                this.tryAgainDialog = true\n                this.countDown = -1\n\n                if (this.profileCheck == undefined) { // if it is the users first game\n                console.log('users first game') \n                    const profileUpdateInfo = { // profile info to be send to firestore\n                        uid: this.user.uid,\n                        correct: this.correctCount,\n                        totalQuestions: this.QuizArrayLength,\n                        lastGame: {\n                            category: this.cat,\n                            score: this.correctCount + ' out of ' + this.QuizArrayLength\n                        },\n                        badges: [this.badge]\n                    } \n                    this.$store.dispatch('sendProfileData', profileUpdateInfo)\n                }\n\n                else if (this.profileCheck !== undefined) { // user already has a profile\n                    const profileUpdateInfo = {\n                        uid: this.user.uid,\n                        correct: this.profileCheck.correct + this.correctCount,\n                        totalQuestions: this.profileCheck.totalQuestions + this.QuizArrayLength,\n                        lastGame: {\n                            category: this.cat,\n                            score: this.correctCount + ' out of ' + this.QuizArrayLength\n                        },\n                        badges: this.profileCheck.badges\n                    }\n                    this.$store.dispatch('sendProfileData', profileUpdateInfo)\n                }\n            \n                \n            }\n            \n        },\n\n        storeAnswer(answer) {\n            if (this.profileCheck !== undefined) {\n                console.log('user already has a profile')\n            } else if (this.profileCheck == undefined) {\n                console.log(\"user has no profile yet\")\n            }\n            this.progress = (this.num + 1) / this.QuizArrayLength * 100\n            \n            var timer = document.getElementById('timer')\n            timer.pause()\n            timer.currentTime = 0\n            \n            var wrong = document.getElementById('wrong')\n            wrong.volume = 0.3 // Set volume of sound\n            var right = document.getElementById('right')\n            right.volume = 0.3 // Set volume of sound\n            \n            if (answer == false) {\n                this.dialogHeader = \"Oops! That is incorrect\"\n                wrong.play()\n                this.dialog = true\n                    \n\n            } else if (answer == true && this.num !== this.QuizArrayLength - 1) {\n                right.play()\n                this.correctCount++\n                this.num++\n                this.countDown = 20 // Reset the timer\n                timer.play()\n\n                // quiz is done\n            } else if (this.num == this.QuizArrayLength - 1 && answer == true) {\n                this.correctCount++\n                this.tryAgainDialog = true\n                this.countDown = -1\n\n                if (this.profileCheck == undefined) { // if it is the users first game\n                console.log('users first game')\n                    const profileUpdateInfo = { // profile info to be send to firestore\n                        uid: this.user.uid,\n                        correct: this.correctCount,\n                        totalQuestions: this.QuizArrayLength,\n                        lastGame: {\n                            category: this.cat,\n                            score: this.correctCount + ' out of ' + this.QuizArrayLength,\n                        },\n                        badges: [this.badge]\n                    } \n                    this.$store.dispatch('sendProfileData', profileUpdateInfo)\n                }\n\n                else if (this.profileCheck !== undefined) { // user already has a profile\n                    const profileUpdateInfo = {\n                        uid: this.user.uid,\n                        correct: this.profileCheck.correct + this.correctCount,\n                        totalQuestions: this.profileCheck.totalQuestions + this.QuizArrayLength,\n                        lastGame: {\n                            category: this.cat,\n                            score: this.correctCount + ' out of ' + this.QuizArrayLength\n                        },\n                        badges: this.profileCheck.badges\n                    }\n                    this.$store.dispatch('sendProfileData', profileUpdateInfo)\n                }\n\n\n                //quiz is also done\n            } else if (this.num == this.QuizArrayLength - 1 && answer == false) {\n                this.tryAgainDialog = true\n                this.countDown = -1\n\n                if (this.profileCheck == undefined) { // if it is the users first game \n                console.log('users first game')\n                    const profileUpdateInfo = { // profile info to be send to firestore\n                        uid: this.user.uid,\n                        correct: this.correctCount,\n                        totalQuestions: this.QuizArrayLength,\n                        lastGame: {\n                            category: this.cat,\n                            score: this.correctCount + ' out of ' + this.QuizArrayLength,\n                        },\n                        badges: [this.badge]\n                    } \n                    this.$store.dispatch('sendProfileData', profileUpdateInfo)\n                }\n\n                else if (this.profileCheck !== undefined) { // user already has a profile\n                    const profileUpdateInfo = {\n                        uid: this.user.uid,\n                        correct: this.profileCheck.correct + this.correctCount,\n                        totalQuestions: this.profileCheck.totalQuestions + this.QuizArrayLength,\n                        lastGame: {\n                            category: this.cat,\n                            score: this.correctCount + ' out of ' + this.QuizArrayLength\n                        },\n                        badges: this.profileCheck.badges\n                    }\n                    this.$store.dispatch('sendProfileData', profileUpdateInfo)\n                }\n\n                \n                \n            }\n            \n        \n        },\n\n        countDownTimer() {\n            if(this.countDown > 0) { \n                setTimeout(() => {\n                    this.countDown -= 1\n                    if (this.dialog == true) { // If a answer is pressed then stop the timer\n                        this.countDown += 1 //doesnt really stop but appears that way in the dom\n                    }\n                    this.countDownTimer()\n                }, 1000)\n            } else if (this.countDown == -1) {\n                return\n            }\n        },\n\n\n        getQuestions () {\n            this.$store.dispatch('setLoadState', true)\n            this.quizes.length = 0 // reset the array when user click 'Try again'\n            this.$http.get('https://opentdb.com/api.php?amount=' + this.number + '&token=' + this.sessionToken + '&category=' + this.cat + '&difficulty=' + this.difficulty + '&type=' + this.questionType + '')\n            .then(response => {\n                if (response.data.response_code == 4) {\n                    this.$store.dispatch('setLoadState', false)\n                    this.noMoreResults = true\n                } else {\n                    var i = 0\n                    var n = 0\n                    this.countDownTimer() // starts the timer\n                    var timer = document.getElementById('timer')\n                    timer.play()\n                    while (i < response.data.results.length) { // goes into each object\n                        let questionArray = []\n                        while (n < 3) { // goes into the current objects sub array \n                            var possible = {\n                                question: response.data.results[i].incorrect_answers[n],\n                                correct: false\n                            }\n                            questionArray.push(possible)\n                            n++\n                        } // while loop from incorrect answers ends\n\n                        possible = { \n                            question: response.data.results[i].correct_answer,\n                            correct: true\n                        }\n\n                        questionArray.push(possible)\n                        const question = { // an object that contains each specific question\n                        num: i + 1, \n                        questions: questionArray,\n                        name: response.data.results[i].question\n                        }\n                        this.quizes.push(question) // store each object inside an array\n                        i++\n                        n = 0 // reset the sub array numbering\n                    } // while loop from individual question object ends\n                    this.$store.dispatch('setLoadState', false)\n                }\n                this.optionSelect = false // hides the option bar\n            }) // then ENDS\n            .catch(error => {\n                console.log(error)\n            })\n            \n            \n        }\n    }\n\n}\n</script>\n\n<style scoped>\n\n#timerHolder {\n    width: 50%;\n    margin: auto;\n    text-align: center;\n}\n\n#dialogHeader {\n    background-color: red;\n}\n\n.customBtn {\n    font-size: 40px!important;\n}\n\n#noResultImgHolder {\n    display: flex;\n    width: auto;\n    flex-direction: column;;\n    align-content: center;\n    padding: 20px;\n    height: 80vh;\n    margin-bottom: 20px;\n}\n\n#noResultImg {\n    margin: auto;\n    height: 80%;\n    max-width: 800px;\n}\n</style>"]}]}